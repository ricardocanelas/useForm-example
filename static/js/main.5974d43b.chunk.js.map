{"version":3,"sources":["Validation.js","useForm.js","App.js","index.js"],"names":["getRuleMessage","rule","defaultMessage","hasOwnProperty","message","getRuleValue","defaultValue","value","validations","required","minLength","length","maxLength","isInvalid","rules","errors","result","undefined","Object","keys","forEach","ruleName","push","useForm","schema","initialValues","onSubmit","useState","state","setState","touched","setTouched","setErrors","isSubmitting","setIsSubmitting","setValue","name","prev","reset","values","handleChange","e","target","handleSubmit","preventDefault","reduce","acc","curKey","temp","map","schemaName","error","filter","item","Boolean","cur","getErrors","App","firstname","lastname","validate","bag","console","log","setInterval","className","type","onChange","disabled","JSON","stringify","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5974d43b.chunk.js","sourcesContent":["const getRuleMessage = (rule, defaultMessage) => {\n  if (typeof rule === 'string') {\n    return rule\n  } else if (typeof rule === 'object' && rule.hasOwnProperty('message')) {\n    return rule.message\n  }\n\n  return defaultMessage\n}\n\nconst getRuleValue = (rule, defaultValue) => {\n  if (typeof rule === 'string' || typeof rule === 'number') {\n    return rule\n  } else if (typeof rule === 'object' && rule.hasOwnProperty('value')) {\n    return rule.value\n  }\n\n  return defaultValue\n}\n\nconst validations = {\n  required: (value, rule) => {\n    return value === '' ? getRuleMessage(rule, 'The field field is required') : true\n  },\n  minLength: (value, rule) => {\n    return value.length < getRuleValue(rule, 1)\n      ? getRuleMessage(rule, `This field must be at least ${getRuleValue(rule, 1)} characters.`)\n      : true\n  },\n  maxLength: (value, rule) => {\n    return value.length > getRuleValue(rule, 1)\n      ? getRuleMessage(rule, `This field may not be greater than ${getRuleValue(rule, 1)} characters.`)\n      : true\n  },\n}\n\nexport const isInvalid = (rules, value) => {\n  if (!rules) return undefined\n\n  const errors = []\n  let result = undefined\n\n  Object.keys(rules).forEach((ruleName) => {\n    const rule = rules[ruleName]\n    if (typeof rule === 'function') {\n      result = rule(value)\n      if (result === false || typeof result === 'string') {\n        errors.push(result)\n      }\n    } else if (validations.hasOwnProperty([ruleName])) {\n      result = validations[ruleName](value, rule)\n      if (result === false || typeof result === 'string') {\n        errors.push(result)\n      }\n    }\n  })\n\n  return errors.length ? errors[0] : undefined\n}\n","import { useState } from 'react'\nimport { isInvalid } from './Validation'\n\nconst useForm = ({ schema, initialValues, onSubmit }) => {\n  const [state, setState] = useState(initialValues || {})\n  const [touched, setTouched] = useState({})\n  const [errors, setErrors] = useState({})\n  const [isSubmitting, setIsSubmitting] = useState(false)\n\n  const setValue = (name, value) => {\n    setState((prev) => ({\n      ...prev,\n      [name]: value,\n    }))\n    setErrors((prev) => ({\n      ...prev,\n      [name]: isInvalid(schema[name], value),\n    }))\n  }\n\n  const getErrors = () => {\n    const temp = Object.keys(schema)\n      .map((schemaName) => {\n        return { name: schemaName, error: isInvalid(schema[schemaName], state[schemaName]) }\n      })\n      .filter((item) => Boolean(item.error))\n\n    if (temp.length) {\n      setErrors(\n        temp.reduce((acc, cur) => {\n          acc[cur.name] = cur.error\n          return acc\n        }, {})\n      )\n    }\n\n    return temp\n  }\n\n  const handleChange = (e) => {\n    const name = e.target.name\n    const value = e.target.value\n    if (!name) return null\n    setValue(name, value)\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n\n    setTouched(\n      Object.keys(state).reduce((acc, curKey) => {\n        acc[curKey] = true\n        return acc\n      }, {})\n    )\n\n    if (getErrors().length === 0) {\n      setIsSubmitting(true)\n      onSubmit({ setIsSubmitting, reset }, e)\n    }\n  }\n\n  const reset = () => {\n    setState(initialValues)\n    setTouched({})\n    setErrors({})\n    setIsSubmitting(false)\n  }\n\n  return {\n    values: state,\n    errors,\n    touched,\n    isSubmitting,\n    setIsSubmitting,\n    setValue,\n    reset,\n    handleChange,\n    handleSubmit,\n  }\n}\n\nexport default useForm\n","import useForm from './useForm'\n\nfunction App() {\n  const { values, errors, touched, isSubmitting, handleChange, handleSubmit } = useForm({\n    initialValues: {\n      firstname: '',\n      lastname: '',\n    },\n    schema: {\n      firstname: {\n        required: 'This is a custom message. This field is required',\n        maxLength: 10,\n        validate: (value) => {\n          return value.length <= 4 ? 'The field must be at least 5 characters.' : true\n        },\n      },\n    },\n    onSubmit: (bag) => {\n      console.log('Ready to send to backend...', { values })\n      setInterval(() => {\n        // bag.setIsSubmitting(false)\n        bag.reset()\n      }, 3000)\n    },\n  })\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <div className=\"flex flex-col\">\n          <label>First Name:</label>\n          <input type=\"text\" name=\"firstname\" value={values.firstname} onChange={handleChange} />\n          {errors.firstname && touched.firstname && <span className=\"invalid\">{errors.firstname}</span>}\n        </div>\n        <div className=\"flex flex-col\">\n          <label>Last Name:</label>\n          <input type=\"text\" name=\"lastname\" value={values.lastname} onChange={handleChange} />\n        </div>\n        <button type=\"submit\" disabled={isSubmitting}>\n          submit\n        </button>\n      </form>\n      <div className=\"debug\">\n        <div>\n          <span>Errors:</span>\n          <pre>{JSON.stringify(errors, null, 2)}</pre>\n        </div>\n        <div>\n          <span>Touched:</span>\n          <pre>{JSON.stringify(touched, null, 2)}</pre>\n        </div>\n        <div>\n          <span>Values:</span>\n          <pre>{JSON.stringify(values, null, 2)}</pre>\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}